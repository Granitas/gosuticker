#!/usr/bin/env python3
import json
import os
import subprocess
import click

"""
This is a simple notifier script that uses Gosuticker to send system notify when game is about to start.
It supports system notify-send and pushbullet api via "pusbullet.py" package (optional)

Ideally you should add it to your crontab to check it every 30 minutes or so.

Copyleft under GPLV3+
"""

HISTORY_LOCATION = os.path.expanduser('~/.gosuticker_notify_history')
with open(HISTORY_LOCATION, 'a') as f:  # make sure history file exists
    pass


@click.command()
@click.argument('game')
@click.argument('team')
@click.option('--seconds', default=900,
              help='seconds threshold before sending out the notification (default=900)')
@click.option('--pushbullet', is_flag=True,
              help='Use pushbullet notification instead system notify-send')
@click.option('--pushbullet-key', help='Pushbullet API key to use to send the notification, '
                                       'can be set through enviroment variable PUSHBULLET_API')
def cli(game, team, seconds, pushbullet, pushbullet_key):
    team = team.lower()
    if pushbullet:
        if not pushbullet_key:
            pushbullet_key = os.environ.get('PUSHBULLET_API', '')
        if not pushbullet_key:
            click.echo('To use pushbullet notification supply --pushbulet-key '
                       'or enviroment variable PUSHBULLET_API', err=True)
            return
        try:
            from pushbullet import Pushbullet
        except ImportError:
            click.echo('To use pushbullet notification install pusbullet.py package;'
                       ' pip install pushbullet.py', err=True)
            return

    matches = json.loads(subprocess.check_output(['gosuticker', game, '--json']))
    for match in matches:
        if int(match['time_secs']) > int(seconds):
            continue
        if team == match['opp1'].lower() or team == match['opp2'].lower():
            # already in history?
            with open(HISTORY_LOCATION, 'r') as f:
                if match['id'] in f.read():
                    continue
            # notify
            title = "{} vs {} in {}".format(match['opp1'], match['opp2'], match['time'])
            body = match['url']
            if pushbullet:
                push = Pushbullet(pushbullet_key)
                push.push_note(title, body)
            else:
                subprocess.Popen(['notify-send', title, body])
            # add to history
            with open(HISTORY_LOCATION, 'a') as f:
                f.write('{}\n'.format(match['id']))

if __name__ == '__main__':
    cli()
